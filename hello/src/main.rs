fn main() {
    println!("Hello, world!");
    println!("gcd(10,2): {}", gcd (10, 2));
}

/**
 * u64 符号なし64ビット整数
 * 
 * mutキーワードをつけると再代入可能
 */
fn gcd(mut n: u64, mut m: u64) -> u64 {
    // ! は関数でなくマクロ呼び出しとなる
    // 真でなければプログラム終了(panic)
    assert!(n != 0 && m != 0);
    while m != 0 {
        if m < n {
            // ローカル変数 変数の使われ方から型を推論できるので型を書く必要なし
            // 型推論は関数の中でしか行われない
            let t = m;
            m = n;
            n = t;
        }
        m = m % n;
    }

    // 関数の最後がセミコロンなしの式で終わる場合、その式が関数の返り値となる
    n
}

/**
 * gcdのユニットテスト
 * #[test]はこの関数がテスト関数であることをしめす
 * 
 * 通常コンパイルではスキップされるが、cargo testを実行すると、自動的にコンパイルされ、実行される
 */
#[test]
fn test_gcd() {
    assert_eq!(gcd(14, 15), 1);
    assert_eq!(gcd(2 * 3 * 5 * 11 * 17, 3 * 7 * 11 * 13 * 9), 3 * 11)
}